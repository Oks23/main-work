{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/Oksana/Downloads/1/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { deleteObject, getDownloadURL, percentage, ref, uploadBytesResumable } from '@angular/fire/storage';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/fire/storage\";\nexport class ImageService {\n  constructor(storage) {\n    this.storage = storage; //return % of file uploading\n\n    this.uploadPercent = 0;\n  } //loading image in firebase\n\n\n  uploadFile(folder, name, file) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      const path = `${folder}/${name}`;\n      let url = '';\n\n      if (file) {\n        try {\n          const storageRef = ref(_this.storage, path);\n          const task = uploadBytesResumable(storageRef, file);\n          percentage(task).subscribe(data => {\n            _this.uploadPercent = data.progress;\n          });\n          yield task;\n          url = yield getDownloadURL(storageRef);\n        } catch (e) {\n          console.error(e);\n        }\n      } else {\n        console.log('wrong format');\n      }\n\n      return Promise.resolve(url);\n    })();\n  }\n\n  deleteUploadFile(imagePath) {\n    const task = ref(this.storage, imagePath);\n    return deleteObject(task);\n  }\n\n}\n\nImageService.ɵfac = function ImageService_Factory(t) {\n  return new (t || ImageService)(i0.ɵɵinject(i1.Storage));\n};\n\nImageService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: ImageService,\n  factory: ImageService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"sources":["C:/Users/Oksana/Downloads/1/src/app/shared/services/image/image.service.ts"],"names":["deleteObject","getDownloadURL","percentage","ref","uploadBytesResumable","i0","i1","ImageService","constructor","storage","uploadPercent","uploadFile","folder","name","file","path","url","storageRef","task","subscribe","data","progress","e","console","error","log","Promise","resolve","deleteUploadFile","imagePath","ɵfac","ImageService_Factory","t","ɵɵinject","Storage","ɵprov","ɵɵdefineInjectable","token","factory","providedIn"],"mappings":";AAAA,SAASA,YAAT,EAAuBC,cAAvB,EAAuCC,UAAvC,EAAmDC,GAAnD,EAAwDC,oBAAxD,QAAoF,uBAApF;AACA,OAAO,KAAKC,EAAZ,MAAoB,eAApB;AACA,OAAO,KAAKC,EAAZ,MAAoB,uBAApB;AACA,OAAO,MAAMC,YAAN,CAAmB;AACtBC,EAAAA,WAAW,CAACC,OAAD,EAAU;AACjB,SAAKA,OAAL,GAAeA,OAAf,CADiB,CAEjB;;AACA,SAAKC,aAAL,GAAqB,CAArB;AACH,GALqB,CAMtB;;;AACMC,EAAAA,UAAU,CAACC,MAAD,EAASC,IAAT,EAAeC,IAAf,EAAqB;AAAA;;AAAA;AACjC,YAAMC,IAAI,GAAI,GAAEH,MAAO,IAAGC,IAAK,EAA/B;AACA,UAAIG,GAAG,GAAG,EAAV;;AACA,UAAIF,IAAJ,EAAU;AACN,YAAI;AACA,gBAAMG,UAAU,GAAGd,GAAG,CAAC,KAAI,CAACM,OAAN,EAAeM,IAAf,CAAtB;AACA,gBAAMG,IAAI,GAAGd,oBAAoB,CAACa,UAAD,EAAaH,IAAb,CAAjC;AACAZ,UAAAA,UAAU,CAACgB,IAAD,CAAV,CAAiBC,SAAjB,CAA2BC,IAAI,IAAI;AAC/B,YAAA,KAAI,CAACV,aAAL,GAAqBU,IAAI,CAACC,QAA1B;AACH,WAFD;AAGA,gBAAMH,IAAN;AACAF,UAAAA,GAAG,SAASf,cAAc,CAACgB,UAAD,CAA1B;AACH,SARD,CASA,OAAOK,CAAP,EAAU;AACNC,UAAAA,OAAO,CAACC,KAAR,CAAcF,CAAd;AACH;AACJ,OAbD,MAcK;AACDC,QAAAA,OAAO,CAACE,GAAR,CAAY,cAAZ;AACH;;AACD,aAAOC,OAAO,CAACC,OAAR,CAAgBX,GAAhB,CAAP;AApBiC;AAqBpC;;AACDY,EAAAA,gBAAgB,CAACC,SAAD,EAAY;AACxB,UAAMX,IAAI,GAAGf,GAAG,CAAC,KAAKM,OAAN,EAAeoB,SAAf,CAAhB;AACA,WAAO7B,YAAY,CAACkB,IAAD,CAAnB;AACH;;AAhCqB;;AAkC1BX,YAAY,CAACuB,IAAb,GAAoB,SAASC,oBAAT,CAA8BC,CAA9B,EAAiC;AAAE,SAAO,KAAKA,CAAC,IAAIzB,YAAV,EAAwBF,EAAE,CAAC4B,QAAH,CAAY3B,EAAE,CAAC4B,OAAf,CAAxB,CAAP;AAA0D,CAAjH;;AACA3B,YAAY,CAAC4B,KAAb,GAAqB,aAAc9B,EAAE,CAAC+B,kBAAH,CAAsB;AAAEC,EAAAA,KAAK,EAAE9B,YAAT;AAAuB+B,EAAAA,OAAO,EAAE/B,YAAY,CAACuB,IAA7C;AAAmDS,EAAAA,UAAU,EAAE;AAA/D,CAAtB,CAAnC","sourcesContent":["import { deleteObject, getDownloadURL, percentage, ref, uploadBytesResumable } from '@angular/fire/storage';\r\nimport * as i0 from \"@angular/core\";\r\nimport * as i1 from \"@angular/fire/storage\";\r\nexport class ImageService {\r\n    constructor(storage) {\r\n        this.storage = storage;\r\n        //return % of file uploading\r\n        this.uploadPercent = 0;\r\n    }\r\n    //loading image in firebase\r\n    async uploadFile(folder, name, file) {\r\n        const path = `${folder}/${name}`;\r\n        let url = '';\r\n        if (file) {\r\n            try {\r\n                const storageRef = ref(this.storage, path);\r\n                const task = uploadBytesResumable(storageRef, file);\r\n                percentage(task).subscribe(data => {\r\n                    this.uploadPercent = data.progress;\r\n                });\r\n                await task;\r\n                url = await getDownloadURL(storageRef);\r\n            }\r\n            catch (e) {\r\n                console.error(e);\r\n            }\r\n        }\r\n        else {\r\n            console.log('wrong format');\r\n        }\r\n        return Promise.resolve(url);\r\n    }\r\n    deleteUploadFile(imagePath) {\r\n        const task = ref(this.storage, imagePath);\r\n        return deleteObject(task);\r\n    }\r\n}\r\nImageService.ɵfac = function ImageService_Factory(t) { return new (t || ImageService)(i0.ɵɵinject(i1.Storage)); };\r\nImageService.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: ImageService, factory: ImageService.ɵfac, providedIn: 'root' });\r\n"]},"metadata":{},"sourceType":"module"}